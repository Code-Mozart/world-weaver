generator kysely {
  provider = "prisma-kysely"

  // Optionally provide a destination directory for the generated file
  // and a filename of your choice
  output   = "../src/lib/types"
  fileName = "database.ts"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ABSTRACT MODELS

// Non-SQL Data Document Storage
model Document {
  id        Int    @id @default(autoincrement())
  worldCuid String
  name      String @unique
  jsonData  String

  @@index(worldCuid)
}

// Abstract node marking a position in the world
model Point {
  id Int   @id @default(autoincrement())
  x  Float
  y  Float

  NetworkNode          NetworkNode[]
  PointsInPolygons     PointsInPolygons[] @relation("PointsInPolygons")
  NextPointsInPolygons PointsInPolygons[] @relation("NextPointsInPolygons")
  Polygon              Polygon[]
}

// Abstract polygon used to define regions in the world
model Polygon {
  id Int @id @default(autoincrement())

  startPointId Int
  StartPoint   Point @relation(fields: [startPointId], references: [id])

  Coastline        Coastline?
  PointsInPolygons PointsInPolygons[]
}

model NetworkNode {
  id Int @id @default(autoincrement())

  pointId Int
  Point   Point @relation(fields: [pointId], references: [id])

  networkId Int
  Network   Network @relation("NodesInNetwork", fields: [networkId], references: [id])

  NetworkEdgesFrom NetworkEdges[] @relation("NetworkEdgesFrom")
  NetworkEdgesTo   NetworkEdges[] @relation("NetworkEdgesTo")
}

model Network {
  id Int @id @default(autoincrement())

  NetworkNode NetworkNode[] @relation("NodesInNetwork")
  River       River[]
  Mountain    Mountain[]
}

// WORLD MODELS

// TODO: Add in later version
// // Any extra information for elements in the world
// model ExtraInformation {
//   id   Int    @id @default(autoincrement())
//   data String
// }

// A coastline marking the edge between ground types in the world
model Coastline {
  id Int @id @default(autoincrement())

  worldCuid String

  polygonId Int     @unique
  Shape     Polygon @relation(fields: [polygonId], references: [id])

  // see src/lib/types/ground-type.ts for valid options
  groundType String

  // user information
  name String?

  @@index(worldCuid)
}

// River Sections may only be connected at their ends
model River {
  id        Int    @id @default(autoincrement())
  worldCuid String

  networkId Int
  Network   Network @relation(fields: [networkId], references: [id])

  // user information
  name String?

  @@index(worldCuid)
}

model Mountain {
  id        Int    @id @default(autoincrement())
  worldCuid String

  networkId Int
  Network   Network @relation(fields: [networkId], references: [id])

  // user information
  name String?

  @@index(worldCuid)
}

// MANY-TO-MANY-MODELS

model PointsInPolygons {
  polygonId Int
  Polygon   Polygon @relation(fields: [polygonId], references: [id])

  pointId Int
  Point   Point @relation("PointsInPolygons", fields: [pointId], references: [id])

  nextPointId Int?
  NextPoint   Point? @relation("NextPointsInPolygons", fields: [nextPointId], references: [id])

  @@id([polygonId, pointId])
}

model NetworkEdges {
  fromNodeId Int
  fromNode   NetworkNode @relation("NetworkEdgesFrom", fields: [fromNodeId], references: [id])

  toNodeId Int
  toNode   NetworkNode @relation("NetworkEdgesTo", fields: [toNodeId], references: [id])

  @@id([fromNodeId, toNodeId])
}
